.\" Manpage for Plugin_store_kafka
.\" Contact ovis-help@ca.sandia.gov to correct errors or typos.
.TH man 7 "2 Jun 2022" "v4" "LDMSD Decomposition man page"

.SH NAME
ldmsd_decomposition - manual for LDMSD decomposition

.SH DESCRIPTION
A decomposition is a routine that converts LDMS set into one or more rows before
feeding them to the store. Currently, only \fBstore_sos\fR, \fBstore_csv\fR, and
\fBstore_kafka\fR support decomposition. To use decomposition, simply specify
\fBdecomposition=\fIDECOMP_CONFIG_JSON_FILE\fR option in the \fBstrgp_add\fR
command. There are three types of decompositions: \fBstatic\fR, \fBas_is\fR,
and `flex`. \fBstatic\fR decomposition statically and strictly decompose LDMS
set according to the definitions in the \fIDECOMP_CONFIG_JSON_FILE\fR.
\fBas_is\fR decomposition on the other hand takes all metrics and converts them
as-is into rows. \fBflex\fR decomposition applies various decompositions by LDMS
schema digest mapping from the configuration.

Please see section \fBSTATIC DECOMPOSITION\fR, \fBAS_IS DECOMPOSITION\fR , and
\fBFLEX DECOMPOSITION\fR for more information.

More decomposition types may be added in the future. The decomposition mechanism
is pluggable. Please see \fBas_is\fR, \fBstatic\fR, and \fBflex\fR decomposition
implementation in \:`ldms/src/decomp/` directory in the source tree for more
information.


.SH STATIC DECOMPOSITION
The \fBstatic\fR decomposition statically and strictly converts LDMS set to one
or more rows according to the \fIDECOMP_CONFIG_JSON_FILE\fR. The format of the
JSON configuration file is as follows:

.EX
{
  "type": \fB"static"\fR,
  "rows": [
    {
      "schema": "\fIOUTPUT_ROW_SCHEMA\fR",
      "cols": [
        {
          "src":"\fILDMS_METRIC_NAME\fR",
          "dst":"\fIDST_COL_NAME\fR",
          "type":"\fITYPE\fR",
          "rec_member": "\fIREC_MEMBER_NAME_IF_SRC_IS_RECORD\fR",
          "fill": \fIFILL_VALUE\fR,
          "op": "\fIOPERATION\fR"
        },
        ...
      ],
      "indices": [
        {
          "name": "\fIINDEX_NAME\fR",
          "cols": [
            "\fIDST_COL_NAME\fR", ...
          ]
        },
        ...
      ],
      "group": {
        "limit": \fIROW_LIMIT\fR,
        "index": [
          "\fIDST_COL_NAME\fR", ...
        ],
        "order": [
          "\fIDST_COL_NAME\fR", ...
        ],
        "timeout": "\fITIME\fR"
      }
    },
    ...
  ]
}
.EE

The \fB"rows"\fR is an array of row definition object, each of which defines an
output row. Each row definition contains:
.RS 2
- \fB"schema"\fR: a string specifying output schema name,
.br
- \fB"cols"\fR: a list of column definitions,
.br
- \fB"indices"\fR: an optional list of index definitions for the storage
  technologies that require or support indexing, and
.br
- \fB"group"\fR: a grouping definition for "op" operations ("group" is not
  required if "op" is not specified; see "op" and "group" below).
.RE

The detail explanation of \fB"cols"\fR, \fB"indices"\fR and \fB"group"\fR
are as follows.

.TP 1
\fB"cols"\fR
Each column object in \fB"cols"\fR contains the following attributes:

.RS 4

.TP 4
\fB"src"\fR : "\fILDMS_METRIC_NAME\fR"
This refers to the metric name in the LDMS set to be used as the source of the
decomposition. \fILDMS_METRIC_NAME\fR can also be specified in the form of
"\fILIST\fR[\fIMEMBER\fR]" to refer to MEMBER of the record in the list NAME.
For example,

.EX
    "src" : "netdev_list[rx_bytes]"
.EE

refers to the "rx_bytes" member of records in "netdev_list".

The \fB"timestamp"\fR, \fB"producer"\fR, and \fB"instance"\fR are special "src"
that refer to update timestamp, producer name and instance name of the set
respectively.

.TP
\fB"dst"\fR : "\fIDST_COL_NAME\fR" (optional)
This is the name of the output column, later consumed by storage policy. If not
specified, the \fILDMS_METRIC_NAME\fR specified in "src" is used.

.TP
\fB"type"\fR : "\fITYPE\fR" (required if "fill" is specified)
The type of the output column. This is required if "fill" attribute if
specified. If "fill" is not specified, "type" is optional. In such case,
the type is the first discovery from the metric value in the LDMS set processed
by this decomposition.

.TP
\fB"rec_member"\fR : "\fIMEMBER_NAME\fR" (optional)
If "src" refers to a list of records or an array of records, "rec_member" can be
specified to access the member of the records. Alternatively, you can use
"\fILIST\fR[\fIMEMBER\fR]" form in "src" to access the member in the records.

.TP
\fB"fill"\fR : \fIFILL_VALUE\fR (optional)
This is the value used to fill in place of "src" in the case that the LDMS set
does not contain "src" metric. The \fIFILL_VALUE\fR can also be an array. If
"src" is not found in the LDMS set and "fill" is not specified, the LDMS set is
skipped.

.TP
\fB"op"\fR : "\fIOPERATION\fR" (optional)
If "op" is set, the decomposition performs the specified \fIOPERATION\fR on the
column. \fB"group"\fR must be specified in the presence of "op" so that the
decomposition knows how to group previously produced rows and perform the
operation on the column of those rows. Please see \fB"group"\fR explanation
below.

The supported \fIOPERATION\fR are "diff", "min", "max", and "mean".

.RE

.TP 1
\fB"indices"\fR
The "indices" is a list of index definition objects. Each index definition
object contains \fB"name"\fR (the name of the index) and \fB"cols"\fR which is
the names of the OUTPUT columns comprising the index.

.TP 1
\fB"group"\fR
The \fB"group"\fR is an object defining how \fB"op"\fR identify rows to operate
on.  The \fBREQUIRED\fR attributes and their descriptions for the \fB"group"\fR
object are as follows:

.RS 4

.TP 4
\fB"index"\fR : [ "\fIDST_COL_NAME\fR", ... ]
This is a list of columns that defines the grouping index.
If two rows r0 and r1 have the same value in each of the corresponding columns,
i.e. for k in index: r0[k] == r1[k], the rows r0 and r1 belong to the same
group.

.TP 4
\fB"order"\fR : [ "\fIDST_COL_NAME\fR", ... ]
This is a list of columns used for orering rows in each group (in descending
order). For example, `[ "timestamp" ]` orders each group (in descending order)
using "timestamp" column.


.TP 4
\fB"limit"\fR : \fIROW_LIMIT\fR
This is an integer limiting the maximum number of rows to be cached in each
group. The first \fIROW_LIMIT\fR rows in the group descendingly ordered by
\fB"order"\fR are cached. The rest are discarded.

.TP 4
\fB"timeout"\fR : "\fITIME\fR"
The amount of time (e.g. "30m") of group inactivity (no row added to the group)
to trigger row cache cleanup for the group. If this value is not set, the row
cache won't be cleaned up.
.RE

.TP 1
.B Static Decomposition Example 1: simple meminfo with fill
The following is an example of a static decomposition definition converting
meminfo set into two schemas, "meminfo_filter" (select a few metrics)
and "meminfo_directmap" (select a few direct map metrics with "fill" since
DirectMap varies by CPU architecture).

.EX
{
  "type": "static",
  "rows": [
    {
      "schema": "meminfo_filter",
      "cols": [
        { "src":"timestamp",    "dst":"ts"      },
        { "src":"producer",     "dst":"prdcr"   },
        { "src":"instance",     "dst":"inst"    },
        { "src":"component_id", "dst":"comp_id" },
        { "src":"MemFree",      "dst":"free"    },
        { "src":"MemActive",    "dst":"active"  }
      ],
      "indices": [
        { "name":"time_comp", "cols":["ts", "comp_id"] },
        { "name":"time", "cols":["ts"] }
      ]
    },
    {
      "schema": "meminfo_directmap",
      "cols": [
        { "src":"timestamp",    "dst":"ts"                                     },
        { "src":"component_id", "dst":"comp_id"                                },
        { "src":"DirectMap4k",  "dst":"directmap4k", "type":"u64",   "fill": 0 },
        { "src":"DirectMap2M",  "dst":"directmap2M", "type":"u64",   "fill": 0 },
        { "src":"DirectMap4M",  "dst":"directmap4M", "type":"u64",   "fill": 0 },
        { "src":"DirectMap1G",  "dst":"directmap1G", "type":"u64",   "fill": 0 }
      ],
      "indices": [
        { "name":"time_comp", "cols":["ts", "comp_id"] },
        { "name":"time", "cols":["ts"] }
      ]
    }
  ]
}
.EE

.TP 1
.B Static Decomposition Example 2: record with "op"
The following is an example of a static decomposition with "rec_member" usage in
various forms and with "op".

.EX
{
  "type": "static",
  "rows": [
    {
      "schema": "netdev2_small",
      "cols": [
        { "src":"timestamp",             "dst":"ts",             "type":"ts"         },
        { "src":"producer",              "dst":"prdcr",          "type":"char_array" },
        { "src":"instance",              "dst":"inst",           "type":"char_array" },
        { "src":"component_id",          "dst":"comp_id",        "type":"u64"        },
        { "src":"netdev_list",           "rec_member":"name",    "dst":"netdev.name" },
        { "src":"netdev_list[rx_bytes]", "dst":"netdev.rx_bytes" },
        { "src":"netdev_list[tx_bytes]"  },
        { "src":"netdev_list[rx_bytes]", "op": "diff",
          "dst":"netdev.rx_bytes_diff" },
        { "src":"netdev_list[tx_bytes]", "op": "diff",
          "dst":"netdev.tx_bytes_diff" }
      ],
      "indices": [
        { "name":"time_comp", "cols":["ts", "comp_id"] },
        { "name":"time", "cols":["ts"] }
      ],
      "group": [
        "limit": 2,
        "index": [ "comp_id", "netdev.name" ],
        "order": [ "ts" ],
        "timeout": "60s"
      ]
    }
  ]
}
.EE

The "name" record member will produce "netdev.name" column name and
"rx_bytes" record member will produce "netdev.rx_bytes" column name as
instructed, while "tx_bytes" will produce "netdev_list[tx_bytes]" column name
since its "dst" is omitted.

The "netdev.rx_bytes_diff" destination column has "op":"diff" that calculate the
difference value from "src":"netdev_list[rx_bytes]". The "group" instructs "op"
to group rows by ["comp_id", "netdev.name"], i.e. the "diff" will be among the
same net device of the same node (comp_id). The "order":["ts"] orders the rows
in the group by "ts" (the timestamp). The "limit":2 keeps only 2 rows in the
group (current and previous row by timestamp). The "timeout": "60s" indicates
that if a group does not receive any data in 60 seconds (e.g. by removing a
virtual network device), the row cache for the group will be cleaned up.

The "netdev.tx_bytes_diff" is the same as "netdev.rx_bytes_diff" but for
tx_bytes.

Assuming that the "netdev_list" has N records in the list, the decomposition
will expand the set into N rows.


.SH AS_IS DECOMPOSITION
The \fBas_is\fR decomposition generate rows as-is according to metrics in the
LDMS set. To avoid schema conflict, such as meminfo collecting from
heterogeneous CPU architectures, \fBas_is\fR decomposition appends the short
LDMS schema digest (7 characters) to the row schema name before submitting the
rows to the storage plugin. For example, "meminfo" LDMS schema may turn into
"meminfo_8d2b8bd" row schema. The \fBas_is\fR decomposition configuration only
takes "indices" attribute which defines indices for the output rows. When
encountering a list of primitives, the as_is decomposition expands the set into
multiple rows (the non-list metrics' values are repeated). When encountering a
list of records, in addition to expanding rows, the decomposition also expand
the record into multiple columns with the name formatted as
"LIST_NAME.REC_MEMBER_NAME". The "timestamp" is not a metric in the set but it
is used in all storage plugins. So, the "timestamp" column is prepended to each
of the output rows.

The format of the JSON configuration is as follows:

.EX
{
  "type": "as_is",
  "indices": [
    { "name": "INDEX_NAME", "cols": [ COLUMN_NAMES, ... ] },
    ...
  ]
}
.EE

The following is an \fBas_is\fR decomposition configuration example with two
indices:

.EX
{
  "type": "as_is",
  "indices": [
    { "name": "time", "cols": [ "timestamp" ] },
    { "name": "time_comp", "cols": [ "timestamp", "component_id" ] }
  ]
}
.EE


.SH FLEX DECOMPOSITION
The \fBflex\fR decomposition applies various decompositions by LDMS schema
digests specified in the configuration. The configurations of the applied
decompositions are also specified in `flex` decomposition file as follows:

.EX
{
  "type": "flex",
  /* defining decompositions to be applied */
  "decomposition": {
    "<DECOMP_1>": {
      "type": "<DECOMP_1_TYPE>",
      ...
    },
    ...
  },
  /* specifying digests and the decompositions to apply */
  "digest": {
    "<LDMS_DIGEST_1>": "<DECOMP_A>",
    "<LDMS_DIGEST_2>": [ "<DECOMP_B>", "<DECOMP_c>" ],
    ...
    "*": "<DECOMP_Z>" /* optional : the unmatched */
  }
}
.EE

.B Example:
In the following example, the "meminfo" LDMS sets have 2 digests due to
different metrics from different architecture. The configuration then maps those
digests to "meminfo" static decomposition (producing "meminfo_filter" rows). It
also showcases the ability to apply multiple decompositions to a matching
digest. The procnetdev2 sets with digest
"E8B9CC8D83FB4E5B779071E801CA351B69DCB9E9CE2601A0B127A2977F11C62A" will have
"netdev2" static decomposition and "the_default" as-is decomposition applied to
them. The sets that do not match any specific digest will match the "*" digest.
In this example, "the_default" as-is decomposition is applied.

.EX
{
  "type": "flex",
  "decomposition": {
    "meminfo": {
      "type": "static",
      "rows": [
        {
          "schema": "meminfo_filter",
          "cols": [
            { "src":"timestamp",    "dst":"ts",      "type":"ts"                         },
            { "src":"producer",     "dst":"prdcr",   "type":"char_array", "array_len":64 },
            { "src":"instance",     "dst":"inst",    "type":"char_array", "array_len":64 },
            { "src":"component_id", "dst":"comp_id", "type":"u64"                        },
            { "src":"MemFree",      "dst":"free",    "type":"u64"                        },
            { "src":"MemActive",    "dst":"active",  "type":"u64"                        }
          ],
          "indices": [
            { "name":"time_comp", "cols":["ts", "comp_id"] },
            { "name":"time", "cols":["ts"] }
          ]
        }
      ]
    },
    "netdev2" : {
      "type" : "static",
      "rows": [
        {
          "schema": "procnetdev2",
          "cols": [
            { "src":"timestamp", "dst":"ts","type":"ts" },
            { "src":"component_id", "dst":"comp_id","type":"u64" },
            { "src":"netdev_list", "rec_member":"name", "dst":"dev.name",
              "type":"char_array", "array_len": 16 },
              { "src":"netdev_list", "rec_member":"rx_bytes", "dst":"dev.rx_bytes",
                "type":"u64" },
                { "src":"netdev_list", "rec_member":"tx_bytes", "dst":"dev.tx_bytes",
                  "type":"u64" }
          ],
          "indices": [
            { "name":"time_comp", "cols":["ts", "comp_id"] }
          ]
        }
      ]
    },
    "the_default": {
      "type": "as_is",
      "indices": [
        { "name": "time", "cols": [ "timestamp" ] },
        { "name": "time_comp", "cols": [ "timestamp", "component_id" ] }
      ]
    }
  },
  "digest": {
    "71B03E47E7C9033E359DB5225BC6314A589D8772F4BC0866B6E79A698C8799C0": "meminfo",
    "59DD05D768CFF8F175496848486275822A6A9795286FD9B534FDB9434EAF4D50": "meminfo",
    "E8B9CC8D83FB4E5B779071E801CA351B69DCB9E9CE2601A0B127A2977F11C62A": [ "netdev2", "the_default" ],
    "*": "the_default"
  }
}
.EE

.SH SEE ALSO
Plugin_store_sos(7), Plugin_store_csv(7), Plugin_store_kafka(7)
